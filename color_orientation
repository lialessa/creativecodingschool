//To use LSM303D compass, moving its heading for desired position (symbolic Mecca) and then associating with the NeoPixel led color change.

#include <Adafruit_NeoPixel.h>
#include <Wire.h>
#include <LSM303.h>

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(1, 7, NEO_GRB + NEO_KHZ800);
LSM303 compass;

int front_color[] = {243,6, 255};
int back_color[] = {46,30, 183};
float current_color[] = {0,0,0}; 
float look_mecca = {200}; //defines the difference on the angles to my simbolic mecca


void setup() {
  Serial.begin(9600);
  Wire.begin();
  compass.init();
  compass.enableDefault();
  
  pixels.begin(); // This initializes the NeoPixel library.  

   /*
  Calibration values; the default values of +/-32767 for each axis
  lead to an assumed magnetometer bias of 0. Use the Calibrate example
  program to determine appropriate values for your particular unit.
  */
  compass.m_min = (LSM303::vector<int16_t>){-1474, -1319, -1389};
  compass.m_max = (LSM303::vector<int16_t>){+1261, +1507, +1267};
  
}

void loop() {  
   compass.read();
  
  /*
  When given no arguments, the heading() function returns the angular
  difference in the horizontal plane between a default vector and
  north, in degrees.
  
  The default vector is chosen by the library to point along the
  surface of the PCB, in the direction of the top of the text on the
  silkscreen. This is the +X axis on the Pololu LSM303D carrier and
  the -Y axis on the Pololu LSM303DLHC, LSM303DLM, and LSM303DLH
  carriers.
  
  To use a different vector as a reference, use the version of heading()
  that takes a vector argument; for example, use
  
    compass.heading((LSM303::vector<int>){0, 0, 1});
  
  to use the +Z axis as a reference.
  */
  float heading = compass.heading((LSM303::vector<int>){0, 0, 1});;
  float input = abs((abs(heading - look_mecca)) -180); // to have it all between 0 and 180 degrees.
  
  
//  // ANALOG INPUT FROM POTENTIOMETER
//  float input = analogRead(A0); // get the measurement from the potentiometer
//  input = abs(map(input, 0, 1023, -180, 180)); // map the values to the middle and from 180 to -180
//
//  // INPUT FROM COMPASS
//  //"Get Data. Compensate and Calculate New Heading"
//  Wire.beginTransmission(HMC6352SlaveAddress);
//  Wire.write(HMC6352ReadAddress);              // The "Get Data" command
//  Wire.endTransmission();

//  //time delays required by HMC6352 upon receipt of the command
//  //Get Data. Compensate and Calculate New Heading : 6ms
//  delay(60);
//
//  Wire.requestFrom(HMC6352SlaveAddress, 2); //get the two data bytes, MSB and LSB
//
//  //"The heading output data will be the value in tenths of degrees
//  //from zero to 3599 and provided in binary format over the two bytes."
//  byte MSB = Wire.read(); // most significant byte
//  byte LSB = Wire.read(); // least significant byte
//
//  float headingSum = (MSB << 8) + LSB; //(MSB / LSB sum)
//  float headingInt = headingSum / 10; 
//
//  Serial.println(headingSum);

  // calculate colour by components, based on two extremes and angle
  current_color[0] = map(input, 0, 180, front_color[0], back_color[0]);
  current_color[1] = map(input, 0, 180, front_color[1], back_color[1]);
  current_color[2] = map(input, 0, 180, front_color[2], back_color[2]);
 

  pixels.setPixelColor(0, current_color[0], current_color[1], current_color[2]); // Moderately bright green color.
  pixels.show(); // This sends the updated pixel color to the hardware.

 Serial.println(input);
  delay(100);
}
